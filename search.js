window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pynu", "modulename": "pynu", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments", "modulename": "pynu.Experiments", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.Experiment", "modulename": "pynu.Experiments.Experiment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.Experiment.Experiment", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.Experiment.Experiment.__init__", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span></span>)</span>"}, {"fullname": "pynu.Experiments.Experiment.Experiment.SetDefinition", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.SetDefinition", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.MCVariables", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.MCVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.Reader", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.Reader", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.set_KDE_1D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.set_KDE_1D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.SetBinner_1D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.SetBinner_1D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.SetBinner_2D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.SetBinner_2D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.DeleteBinner", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.DeleteBinner", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.set_energy_bias", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.set_energy_bias", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bias_E</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.set_energy_scale", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.set_energy_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scale_E</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.BinIt_MC_1D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.BinIt_MC_1D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.BinIt_MC_2D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.BinIt_MC_2D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.BinIt_Data_1D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.BinIt_Data_1D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.BinIt_Data_2D", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.BinIt_Data_2D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.StartPhysicsWeights", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.StartPhysicsWeights", "kind": "function", "doc": "<p>Start physics weights from scratch, i.e. equal to 1</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.UpdatePhysicsWeights", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.UpdatePhysicsWeights", "kind": "function", "doc": "<p>Update physics weights for the experiment by mutiplying the existing weights with the input vector <code>w</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.UpdateBaseWeights", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.UpdateBaseWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.StartNuisanceWeights", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.StartNuisanceWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.UpdateNuisanceWeights", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.UpdateNuisanceWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.UpdateNominalWeights", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.UpdateNominalWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.SetExpectedWeight", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.SetExpectedWeight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.SetExpectedBinned", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.SetExpectedBinned", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.SetObservedBinned", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.SetObservedBinned", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.GetObservedBinned", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.GetObservedBinned", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.GetExpectedBinned", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.GetExpectedBinned", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.Experiment.Experiment.RemoveFewEntries", "modulename": "pynu.Experiments.Experiment", "qualname": "Experiment.RemoveFewEntries", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">which</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.HyperK_from_SuperK_Atm_Official", "modulename": "pynu.Experiments.HyperK_from_SuperK_Atm_Official", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.HyperK_from_SuperK_Atm_Official.HyperK", "modulename": "pynu.Experiments.HyperK_from_SuperK_Atm_Official", "qualname": "HyperK", "kind": "class", "doc": "<p></p>\n", "bases": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV"}, {"fullname": "pynu.Experiments.HyperK_from_SuperK_Atm_Official.HyperK.__init__", "modulename": "pynu.Experiments.HyperK_from_SuperK_Atm_Official", "qualname": "HyperK.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.HyperK_from_SuperK_Atm_Pheno", "modulename": "pynu.Experiments.HyperK_from_SuperK_Atm_Pheno", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.HyperK_from_SuperK_Atm_Pheno.HyperK", "modulename": "pynu.Experiments.HyperK_from_SuperK_Atm_Pheno", "qualname": "HyperK", "kind": "class", "doc": "<p></p>\n", "bases": "pynu.Experiments.SuperK_Atm_Pheno.SuperK_Htag"}, {"fullname": "pynu.Experiments.HyperK_from_SuperK_Atm_Pheno.HyperK.__init__", "modulename": "pynu.Experiments.HyperK_from_SuperK_Atm_Pheno", "qualname": "HyperK.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.ICUp_Atm", "modulename": "pynu.Experiments.ICUp_Atm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm", "kind": "class", "doc": "<p></p>\n", "bases": "pynu.Experiments.Experiment.Experiment"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.__init__", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.MCVariables", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.MCVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.SetInitialFlux", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.SetInitialFlux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">energy_nodes</span>, </span><span class=\"param\"><span class=\"n\">cth_nodes</span>, </span><span class=\"param\"><span class=\"n\">neutrino_flavors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.NEUTMode", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.NEUTMode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.DataVariables", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.DataVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.BinMC", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.BinMC", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.BinData", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.BinData", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.ICUp_Atm.ICUp_Atm.Binning", "modulename": "pynu.Experiments.ICUp_Atm", "qualname": "ICUp_Atm.Binning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.MCReader", "modulename": "pynu.Experiments.MCReader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.MCReader.Manager", "modulename": "pynu.Experiments.MCReader", "qualname": "Manager", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">detector</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.MCReader.reader", "modulename": "pynu.Experiments.MCReader", "qualname": "reader", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official", "modulename": "pynu.Experiments.SuperK_Atm_Official", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I", "kind": "class", "doc": "<p></p>\n", "bases": "pynu.Experiments.Experiment.Experiment"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.MCVariables", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.MCVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.SKFluxWeight", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.SKFluxWeight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.SetInitialFlux", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.SetInitialFlux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">energy_nodes</span>, </span><span class=\"param\"><span class=\"n\">cth_nodes</span>, </span><span class=\"param\"><span class=\"n\">neutrino_flavors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.DataVariables", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.DataVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.BinMC", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.BinMC", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.BinData", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.BinData", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_I.Binning", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_I.Binning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_II", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_II", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_I"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_II.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_II.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_III", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_III", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_I"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_III.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_III.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV_noNtag", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV_noNtag", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_I"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV_noNtag.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV_noNtag.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_I"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV.AddMCVariables", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV.AddMCVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV.AddDataVariables", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV.AddDataVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_IV.Binning", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_IV.Binning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_V", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_V", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_IV"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_V.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_V.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_VI", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_VI", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_IV"}, {"fullname": "pynu.Experiments.SuperK_Atm_Official.SuperK_VI.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Official", "qualname": "SuperK_VI.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK", "kind": "class", "doc": "<p></p>\n", "bases": "pynu.Experiments.Experiment.Experiment"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.MCVariables", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.MCVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.SetInitialFlux", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.SetInitialFlux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">energy_nodes</span>, </span><span class=\"param\"><span class=\"n\">cth_nodes</span>, </span><span class=\"param\"><span class=\"n\">neutrino_flavors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.DataVariables", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.DataVariables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.BinMC", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.BinMC", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">shift_E</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">bias_E</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.BinData", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.BinData", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK.Binning", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK.Binning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK_Htag", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK_Htag", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK_Htag.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK_Htag.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK_Htag.Binning", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK_Htag.Binning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK_Gdtag", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK_Gdtag", "kind": "class", "doc": "<p></p>\n", "bases": "SuperK_Htag"}, {"fullname": "pynu.Experiments.SuperK_Atm_Pheno.SuperK_Gdtag.__init__", "modulename": "pynu.Experiments.SuperK_Atm_Pheno", "qualname": "SuperK_Gdtag.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict_of_details</span>, </span><span class=\"param\"><span class=\"n\">scenario</span></span>)</span>"}, {"fullname": "pynu.Experiments.old+useful_MCReader", "modulename": "pynu.Experiments.old+useful_MCReader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.__init__", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">exposure</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span>)</span>"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.Binning", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.Binning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.ICSystematicTables", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.ICSystematicTables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.BFOscillator", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.BFOscillator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">neutrino_flavors</span>,</span><span class=\"param\">\t<span class=\"n\">Sin2Theta12</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Sin2Theta13</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Sin2Theta23</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Dm221</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Dm231</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">dCP</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Ordering</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.BinOscillator", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.BinOscillator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">neutrino_flavors</span>,</span><span class=\"param\">\t<span class=\"n\">t12</span>,</span><span class=\"param\">\t<span class=\"n\">t13</span>,</span><span class=\"param\">\t<span class=\"n\">t23</span>,</span><span class=\"param\">\t<span class=\"n\">dm21</span>,</span><span class=\"param\">\t<span class=\"n\">dm31</span>,</span><span class=\"param\">\t<span class=\"n\">dcp</span>,</span><span class=\"param\">\t<span class=\"n\">Ordering</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.BinIt", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.BinIt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">shift_E</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.wBinIt", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.wBinIt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">shift_E</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.Exp_wBinIt", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.Exp_wBinIt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">shift_E</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.InitialFlux", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.InitialFlux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Experiments.old+useful_MCReader.Reader.Oscillator", "modulename": "pynu.Experiments.old+useful_MCReader", "qualname": "Reader.Oscillator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">neutrino_flavors</span>,</span><span class=\"param\">\t<span class=\"n\">t12</span>,</span><span class=\"param\">\t<span class=\"n\">t13</span>,</span><span class=\"param\">\t<span class=\"n\">t23</span>,</span><span class=\"param\">\t<span class=\"n\">dm21</span>,</span><span class=\"param\">\t<span class=\"n\">dm31</span>,</span><span class=\"param\">\t<span class=\"n\">dcp</span>,</span><span class=\"param\">\t<span class=\"n\">Ordering</span><span class=\"o\">=</span><span class=\"s1\">&#39;normal&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes", "modulename": "pynu.PhysicsTunes", "kind": "module", "doc": "<p>This module contains the PhysicsTunes class and all the submodules for each of the blocks.\nIt also contains a set uilities which are still under construction.</p>\n"}, {"fullname": "pynu.PhysicsTunes.CrossSection", "modulename": "pynu.PhysicsTunes.CrossSection", "kind": "module", "doc": "<p>Contains the tunes for various neutrino cross sections.</p>\n"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection", "kind": "class", "doc": "<p>Base class for physics tunes</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.XSecNuTau", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.XSecNuTau", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_XSecNuTau", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_XSecNuTau", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.NCoverCC", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.NCoverCC", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_NCoverCC", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_NCoverCC", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.AxialMass", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.AxialMass", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_AxialMass", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_AxialMass", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.NCHad", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.NCHad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_NCHad", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_NCHad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.DIS", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.DIS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_DIS", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_DIS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CCQE", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CCQE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CCQE", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CCQE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CCQENuBarNu", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CCQENuBarNu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CCQENuBarNu", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CCQENuBarNu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CCQEMuE", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CCQEMuE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CCQEMuE", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CCQEMuE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CC1Pi_Pi0Pi", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CC1Pi_Pi0Pi", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CC1Pi_Pi0Pi", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CC1Pi_Pi0Pi", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CC1Pi_NuBarNuE", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CC1Pi_NuBarNuE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CC1Pi_NuBarNuE", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CC1Pi_NuBarNuE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CC1Pi_NuBarNuMu", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CC1Pi_NuBarNuMu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CC1Pi_NuBarNuMu", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CC1Pi_NuBarNuMu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CC1PiProduction", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CC1PiProduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CC1PiProduction", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CC1PiProduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.CohPiProduction", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.CohPiProduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.CrossSection.WaterXSection.WaterXSection.diff_CohPiProduction", "modulename": "pynu.PhysicsTunes.CrossSection.WaterXSection", "qualname": "WaterXSection.diff_CohPiProduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector", "modulename": "pynu.PhysicsTunes.Detector", "kind": "module", "doc": "<p>Contains the tunes for various neutrino detectors.</p>\n"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade", "kind": "class", "doc": "<p>Base class for physics tunes</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.IceAbsorption", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.IceAbsorption", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_IceAbsorption", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_IceAbsorption", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.IceScattering", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.IceScattering", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_IceScattering", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_IceScattering", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.OffSet", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.OffSet", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_OffSet", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_OffSet", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.OptEffHeadon", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.OptEffHeadon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_OptEffHeadon", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_OptEffHeadon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.OptEffLateral", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.OptEffLateral", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_OptEffLateral", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_OptEffLateral", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.OptEffOverall", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.OptEffOverall", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_OptEffOverall", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_OptEffOverall", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.CoinFraction", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.CoinFraction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.ICUpDetector.ICUpgrade.diff_CoinFraction", "modulename": "pynu.PhysicsTunes.Detector.ICUpDetector", "qualname": "ICUpgrade.diff_CoinFraction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK", "kind": "class", "doc": "<p>Class containing general implementation of a Super-Kamiokande like detectors.</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.energy_scale", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.energy_scale", "kind": "function", "doc": "<p>Method for modifying the energy scale of the simulation by multiplying by x the\nreconstructed energy.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_energy_scale", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_energy_scale", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the energy scale w.r.t. the\ntuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>energy_scale</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.FCPC_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.FCPC_separation", "kind": "function", "doc": "<p>Method changing the efficiency of the fully and partially-contained events in SK.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_FCPC_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_FCPC_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the fully and partially-contained events\nw.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>FCPC_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.FC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.FC_reduction", "kind": "function", "doc": "<p>Method changing the efficiency of the fully-contained events reduction in SK.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_FC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_FC_reduction", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the fully-contained events w.r.t.\nthe tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>FC_reduction</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.fiducial_volume", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.fiducial_volume", "kind": "function", "doc": "<p>Method changing the efficiency of the fiducial volume cut.\nNOTE: Currently, it applies a normalization factor on all events. More precise implementation coming soon.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_fiducial_volume", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_fiducial_volume", "kind": "function", "doc": "<p>Method for computing the derivative of the weights w.r.t. the tuning parameter of the fiducial volumen.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>fiducial_volume</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.PC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.PC_reduction", "kind": "function", "doc": "<p>Method changing the efficiency of the partially-contained events reduction in SK.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_PC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_PC_reduction", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the partially-contained events w.r.t.\nthe tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>PC_reduction</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.subgev_2ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.subgev_2ring_pi0", "kind": "function", "doc": "<p>Method changing the fraction of 2-ring $\\pi^0$-like events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_subgev_2ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_subgev_2ring_pi0", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the 2-ring $\\pi^0$-like events w.r.t.\nthe tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>subgev_2ring_pi0</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.subgev_1ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.subgev_1ring_pi0", "kind": "function", "doc": "<p>Method changing the fraction of single-ring $\\pi^0$-like events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_subgev_1ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_subgev_1ring_pi0", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the single-ring $\\pi^0$-like events w.r.t.\nthe tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>subgev_1ring_pi0</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_nunubar_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.multiring_nunubar_separation", "kind": "function", "doc": "<p>Method changing the efficiency of neutrino-antineutrino separation in multi-ring events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_nunubar_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_multiring_nunubar_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the multi-ring neutrino and antineutrino\nevents w.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>multiring_nunubar_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_emu_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.multiring_emu_separation", "kind": "function", "doc": "<p>Method changing the efficiency of electron-muon separation in multi-ring events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_emu_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_multiring_emu_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the multi-ring muon and electron (anti)neutrino\nevents w.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>multiring_emu_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_eother_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.multiring_eother_separation", "kind": "function", "doc": "<p>Method changing the efficiency of electron neutrinos interacting charged-current and neutral-current\ninteractions in multi-ring events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_eother_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_multiring_eother_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the multi-ring e-like events w.r.t. the\ntuning parameter separating between CC $\\nu_e$ and NC $\\nu$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>multiring_eother_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.pc_stopthru_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.pc_stopthru_separation", "kind": "function", "doc": "<p>Method changing the efficiency of PC-StopThru separation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_PC_StopThru_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_PC_StopThru_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the PC and Stop Thru events w.r.t. the\ntuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>pc_stopthru_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.pi0_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.pi0_ring_separation", "kind": "function", "doc": "<p>Method changing the efficiency of ring separation in the $\\pi^0\\rightarrow 2\\gamma$ decay.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_pi0_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_pi0_ring_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the events from $\\pi^0\\rightarrow 2\\gamma$ decays\nw.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>pi0_ring_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.e_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.e_ring_separation", "kind": "function", "doc": "<p>Method changing the efficiency of detecting e-like rings.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_e_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_e_ring_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the e-like ring events w.r.t. the\ntuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>e_ring_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.mu_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.mu_ring_separation", "kind": "function", "doc": "<p>Method changing the efficiency of detecting $\\mu$-like rings.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_mu_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_mu_ring_separation", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the $\\mu$-like ring events w.r.t. the\ntuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>mu_ring_separation</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.singlering_pid", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.singlering_pid", "kind": "function", "doc": "<p>Method changing the particle identification efficiency of single-ring events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_singlering_pid", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_singlering_pid", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the single-ring events w.r.t. the pid tuning\nparameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>singlering_pid</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_pid", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.multiring_pid", "kind": "function", "doc": "<p>Method changing the particle identification efficiency of multi-ring events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_pid", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_multiring_pid", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the multi-ring events w.r.t. the pid tuning\nparameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>multiring_pid</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.neutron_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.neutron_tagging", "kind": "function", "doc": "<p>Method changing the efficiency of neutron tagging.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_neutron_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_neutron_tagging", "kind": "function", "doc": "<p>Method for computing the derivative of the weights w.r.t. the neutron tagging efficiency tuning\nparameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>neutron_tagging</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.decay_e_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.decay_e_tagging", "kind": "function", "doc": "<p>Method changing the efficiency of decay electron tagging.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_decay_e_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKDetector", "qualname": "SuperK.diff_decay_e_tagging", "kind": "function", "doc": "<p>Method for computing the derivative of the weights w.r.t. the decay electron tagging efficiency tuning\nparameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>decay_e_tagging</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd", "kind": "class", "doc": "<p>Class containing general implementation of a Super-Kamiokande with Gadolinium detector.</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.energy_scale", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.energy_scale", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.energy_scale</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_energy_scale", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_energy_scale", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_energy_scale</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.FCPC_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.FCPC_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.FCPC_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_FCPC_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_FCPC_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_FCPC_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.fiducial_volume", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.fiducial_volume", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.fiducial_volume_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_fiducial_volume", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_fiducial_volume", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_fiducial_volume_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.FC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.FC_reduction", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.FC_reduction</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_FC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_FC_reduction", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_FC_reduction</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.PC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.PC_reduction", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.PC_reduction</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_PC_reduction", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_PC_reduction", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_PC_reduction</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.subgev_2ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.subgev_2ring_pi0", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.subgev_2ring_pi0</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_subgev_2ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_subgev_2ring_pi0", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_subgev_2ring_pi0</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.subgev_1ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.subgev_1ring_pi0", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.subgev_1ring_pi0</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_subgev_1ring_pi0", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_subgev_1ring_pi0", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_subgev_1ring_pi0</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.multiring_nunubar_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.multiring_nunubar_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_nunubar_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_multiring_nunubar_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_multiring_nunubar_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_nunubar_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.multiring_emu_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.multiring_emu_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_emu_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_multiring_emu_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_multiring_emu_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_emu_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.multiring_eother_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.multiring_eother_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_eother_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_multiring_eother_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_multiring_eother_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_eother_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.pc_stopthru_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.pc_stopthru_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.pc_stopthru_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_pc_stopthru_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_pc_stopthru_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_pc_stopthru_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.pi0_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.pi0_ring_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.pi0_ring_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_pi0_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_pi0_ring_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_pi0_ring_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.e_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.e_ring_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.e_ring_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_e_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_e_ring_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_e_ring_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.mu_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.mu_ring_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.mu_ring_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_mu_ring_separation", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_mu_ring_separation", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_mu_ring_separation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.singlering_pid", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.singlering_pid", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.singlering_pid</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_singlering_pid", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_singlering_pid", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_singlering_pid</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.multiring_pid", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.multiring_pid", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.multiring_pid</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_multiring_pid", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_multiring_pid", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_multiring_pid</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.neutron_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.neutron_tagging", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.neutron_tagging</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_neutron_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_neutron_tagging", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diffneutron_tagging</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.decay_e_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.decay_e_tagging", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.decay_e_tagging</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SKGdDetector.SuperK_Gd.diff_decay_e_tagging", "modulename": "pynu.PhysicsTunes.Detector.SKGdDetector", "qualname": "SuperK_Gd.diff_decay_e_tagging", "kind": "function", "doc": "<p>See <code>pynu.PhysicsTunes.Detector.SKDetector.SuperK.diff_decay_e_tagging</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SuperK_IV", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SuperK_IV", "kind": "class", "doc": "<p>Base class for physics tunes</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_SKEnergyScale", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_SKEnergyScale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_FCPCSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_FCPCSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_FCReduction", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_FCReduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_PCReduction", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_PCReduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_FiducialVolume", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_FiducialVolume", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_SubGeV2ringPi0", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_SubGeV2ringPi0", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_SubGeV1ringPi0", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_SubGeV1ringPi0", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_MultiRing_NuNuBarSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_MultiRing_NuNuBarSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_MultiRing_EMuSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_MultiRing_EMuSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_MultiRing_EOtherSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_MultiRing_EOtherSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_PC_StopThruSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_PC_StopThruSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_Pi0_RingSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_Pi0_RingSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_E_RingSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_E_RingSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_Mu_RingSeparation", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_Mu_RingSeparation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_SingleRing_PID", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_SingleRing_PID", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_MultiRing_PID", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_MultiRing_PID", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_NeutronTagging", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_NeutronTagging", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Detector.SuperKIV_Detector.SKIV_DecayETagging", "modulename": "pynu.PhysicsTunes.Detector.SuperKIV_Detector", "qualname": "SKIV_DecayETagging", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux", "modulename": "pynu.PhysicsTunes.Flux", "kind": "module", "doc": "<p>Contains the tunes for various neutrino fluxes.</p>\n"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux", "kind": "class", "doc": "<p>Class containing the tunes for the atmospheric neutrino flux.</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.normalization", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.normalization", "kind": "function", "doc": "<p>Method for modifying the atmospheric flux normalization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_normalization", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_normalization", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the atm. flux normalization\nw.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>normalization</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.normalization_below1GeV", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.normalization_below1GeV", "kind": "function", "doc": "<p>Method for modifying the atmospheric flux normalization\nbelow 1 GeV.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_normalization_below1GeV", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_normalization_below1GeV", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the atm. flux normalization\nbelow 1 GeV w.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>normalization_below1GeV</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.normalization_above1GeV", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.normalization_above1GeV", "kind": "function", "doc": "<p>Method for modifying the atmospheric flux normalization above 1 GeV.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_normalization_above1GeV", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_normalization_above1GeV", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the atm. flux normalization\nabove 1 GeV w.r.t. the tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>normalization_above1GeV</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.tilt", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.tilt", "kind": "function", "doc": "<p>Method for modifying the power-law of the atmospheric flux normalization taking as reference\n$E_{\\nu}^0 = 10~GeV$. That is $\\Phi(E_{\\nu}) \\sim \\big( \\frac{E_{\\nu}}{E_{\\nu}^0} \\big)^{x}$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_tilt", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_tilt", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of the flux tilt w.r.t. the tuning\nparameter, i.e. $\\frac{\\partial \\Phi(E_{\\nu})}{\\partial x} \\sim \\big( \\frac{E_{\\nu}}{E_{\\nu}^0} \\big)^{x} \\ln \\big( \\frac{E_{\\nu}}{E_{\\nu}^0} \\big)$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>tilt</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.nunubar_ratio", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.nunubar_ratio", "kind": "function", "doc": "<p>Method for modifying the neutrino and anti-neutrino ratio of the atmospheric flux.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_nunubar_ratio", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_nunubar_ratio", "kind": "function", "doc": "<p>Method for computing the derivative of the neutrino anti-neutrino ratio weights w.r.t.\nthe tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>nunubar_ratio</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.flavor_ratio", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.flavor_ratio", "kind": "function", "doc": "<p>Method for modifying the neutrino flavor ratio of the atmospheric flux.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_flavor_ratio", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_flavor_ratio", "kind": "function", "doc": "<p>Method for computing the derivative of the neutrino falvor ratio weights w.r.t.\nthe tuning parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>flavor_ratio</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.zenith_up", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.zenith_up", "kind": "function", "doc": "<p>Method for modifying the zenith angle dependence of the up-going (negative\n$\\cos \\theta_{zen}$) fraction of the atmospheric flux assuming the relative\nuncertainty is parametrized as,\n$\\eta(\\cos \\theta_{zen}) = 1 - x * \\tanh^2 (\\cos \\theta_{zen})$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_zenith_up", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_zenith_up", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of zenith-dependence variation of\nup-going neutrinos w.r.t. the tuning parameter, i.e.\n$\\frac{d \\eta(\\cos \\theta_{zen})}{d x} = - \\tanh^2 (\\cos \\theta_{zen})$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>zenith_up</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.zenith_down", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.zenith_down", "kind": "function", "doc": "<p>Method for modifying the zenith angle dependence of the down-going (positive\n$\\cos \\theta_{zen}$) fraction of the atmospheric flux assuming the relative\nuncertainty is parametrized as,\n$\\eta(\\cos \\theta_{zen}) = 1 - x * \\tanh^2 (\\cos \\theta_{zen})$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the weights from this tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Flux.AtmoFlux.AtmosphericFlux.diff_zenith_down", "modulename": "pynu.PhysicsTunes.Flux.AtmoFlux", "qualname": "AtmosphericFlux.diff_zenith_down", "kind": "function", "doc": "<p>Method for computing the derivative of the weights of zenith-dependence variation of\nup-going neutrinos w.r.t. the tuning parameter, i.e.\n$\\frac{d \\eta(\\cos \\theta_{zen})}{d x} = - \\tanh^2 (\\cos \\theta_{zen})$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (float):</strong>  Value of the tuning parameter.</li>\n<li><strong>experiment (<code>pynu.Experiments.Experiment</code> class):</strong>  Class containing the information of the experiment,</li>\n<li>of special interest are the Monte Carlos simulations.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy.array or float with the derivative of the <code>zenith_up</code> weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations", "modulename": "pynu.PhysicsTunes.Oscillations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Oscillations.AtmOsc", "modulename": "pynu.PhysicsTunes.Oscillations.AtmOsc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Oscillations.AtmOsc.AtmosphericOscillations", "modulename": "pynu.PhysicsTunes.Oscillations.AtmOsc", "qualname": "AtmosphericOscillations", "kind": "class", "doc": "<p>Base class for physics tunes</p>\n", "bases": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator"}, {"fullname": "pynu.PhysicsTunes.Oscillations.AtmOsc.AtmosphericOscillations.__init__", "modulename": "pynu.PhysicsTunes.Oscillations.AtmOsc", "qualname": "AtmosphericOscillations.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scenario</span>, </span><span class=\"param\"><span class=\"n\">neutrino_flavors</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span>)</span>"}, {"fullname": "pynu.PhysicsTunes.Oscillations.AtmOsc.AtmosphericOscillations.GetOscillations", "modulename": "pynu.PhysicsTunes.Oscillations.AtmOsc", "qualname": "AtmosphericOscillations.GetOscillations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator", "kind": "class", "doc": "<p>Base class for physics tunes</p>\n", "bases": "PhysicsTunes.PhysicsTunes.Tune"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.__init__", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scenario</span>, </span><span class=\"param\"><span class=\"n\">neutrino_flavors</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.SetParameterLabels", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.SetParameterLabels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwpars</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.UpdateParameter", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.UpdateParameter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.SetUpParameters", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.SetUpParameters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwpars</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.ApplyParameters", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.ApplyParameters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.SetUpOscillator", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.SetUpOscillator", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.GetOscillations", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.GetOscillations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.Sin2Theta13", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.Sin2Theta13", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.diff_Sin2Theta13", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.diff_Sin2Theta13", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.Sin2Theta12", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.Sin2Theta12", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.diff_Sin2Theta12", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.diff_Sin2Theta12", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.Sin2Theta23", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.Sin2Theta23", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.diff_Sin2Theta23", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.diff_Sin2Theta23", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.dCP", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.dCP", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.diff_dCP", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.diff_dCP", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.Dm221", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.Dm221", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.diff_Dm221", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.diff_Dm221", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.Dm231", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.Dm231", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.diff_Dm231", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.diff_Dm231", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.NSQNeutrinoType", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.NSQNeutrinoType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Oscillations.Oscillations.Oscillator.NSQNeutrinoFlavor", "modulename": "pynu.PhysicsTunes.Oscillations.Oscillations", "qualname": "Oscillator.NSQNeutrinoFlavor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experiment</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes", "kind": "class", "doc": "<p>Contains all physics tunes of a given experiment</p>\n"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.__init__", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">experiment</span>, </span><span class=\"param\"><span class=\"n\">scenario</span>, </span><span class=\"param\"><span class=\"n\">neutrino_flavors</span>, </span><span class=\"param\"><span class=\"n\">set_all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.GetFlux", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.GetFlux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func_name</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.GetXSection", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.GetXSection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func_name</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.GetDetector", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.GetDetector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func_name</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.GetOscillation", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.GetOscillation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func_name</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.SetFlux", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.SetFlux", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.SetXSection", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.SetXSection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.SetDetector", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.SetDetector", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.PhysicsTunes.SetOscillation", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "PhysicsTunes.SetOscillation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.Tune", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "Tune", "kind": "class", "doc": "<p>Base class for physics tunes</p>\n"}, {"fullname": "pynu.PhysicsTunes.PhysicsTunes.Tune.Get", "modulename": "pynu.PhysicsTunes.PhysicsTunes", "qualname": "Tune.Get", "kind": "function", "doc": "<p>Get specific weights for a given experiment from tune evaluated at x</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tune</span>, </span><span class=\"param\"><span class=\"n\">exp</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Utilities", "modulename": "pynu.PhysicsTunes.Utilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PhysicsTunes.Utilities.Manager", "modulename": "pynu.PhysicsTunes.Utilities", "qualname": "Manager", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PhysicsTunes.Utilities.ICUp", "modulename": "pynu.PhysicsTunes.Utilities", "qualname": "ICUp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Ebin</span>, </span><span class=\"param\"><span class=\"n\">Zbin</span>, </span><span class=\"param\"><span class=\"n\">syst</span>, </span><span class=\"param\"><span class=\"n\">cut</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot", "modulename": "pynu.Plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Plot.Plot", "modulename": "pynu.Plot", "qualname": "Plot", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pynu.Plot.Plot.__init__", "modulename": "pynu.Plot", "qualname": "Plot.__init__", "kind": "function", "doc": "<p>Set up basic analysis variables and structure to build full analysis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">analysis_output_file</span>, </span><span class=\"param\"><span class=\"n\">analysis_input_file</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">directory</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "pynu.Plot.Plot.read_analysis_output", "modulename": "pynu.Plot", "qualname": "Plot.read_analysis_output", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.colors", "modulename": "pynu.Plot", "qualname": "Plot.colors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.ResultPlotsMatrix", "modulename": "pynu.Plot", "qualname": "Plot.ResultPlotsMatrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interpolate</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.best_fit_nuisance", "modulename": "pynu.Plot", "qualname": "Plot.best_fit_nuisance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.posterior_nuisance", "modulename": "pynu.Plot", "qualname": "Plot.posterior_nuisance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.NuisancePlots", "modulename": "pynu.Plot", "qualname": "Plot.NuisancePlots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">all_plots</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">interpolate</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.Plot1D", "modulename": "pynu.Plot", "qualname": "Plot.Plot1D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">all_plots</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">also_stats_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">interpolate</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.Plot2D", "modulename": "pynu.Plot", "qualname": "Plot.Plot2D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">all_plots</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">also_stats_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">interpolate</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.Format", "modulename": "pynu.Plot", "qualname": "Plot.Format", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Plot.Plot.check_zeroes", "modulename": "pynu.Plot", "qualname": "Plot.check_zeroes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit", "modulename": "pynu.PyNuFit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.PyNuFit.PyNuFit", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit", "kind": "class", "doc": "<p>Top class containing everything</p>\n"}, {"fullname": "pynu.PyNuFit.PyNuFit.__init__", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">analysis_file</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pynu.PyNuFit.PyNuFit.path", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.path", "kind": "variable", "doc": "<p>Set up basic analysis variables and structure to build full analysis</p>\n"}, {"fullname": "pynu.PyNuFit.PyNuFit.PhysicsTunes", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.PhysicsTunes", "kind": "variable", "doc": "<p>Start the analysis</p>\n"}, {"fullname": "pynu.PyNuFit.PyNuFit.ComputeBinnedObservation", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ComputeBinnedObservation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ComputeBinnedExpectation", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ComputeBinnedExpectation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span>, </span><span class=\"param\"><span class=\"n\">nuisance_vector</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">physics</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ComputeBinnedDiffExpectation", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ComputeBinnedDiffExpectation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nuisance_vector</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetUpExperiments", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetUpExperiments", "kind": "function", "doc": "<p>Loop over experiments specified in analysis file and store each of them\ninto a dictionary with keys 'detector_source' (e.g. HyperK+Atmospheric)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetUpPhysicsTunes", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetUpPhysicsTunes", "kind": "function", "doc": "<p>Loop over physics tunes specified in analysis file and store each of them\ninto a dictionary with keys 'detector+source' (e.g. HyperK+Atmospheric)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.StartPhysics", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.StartPhysics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.StartNuisance", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.StartNuisance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetBinnedObservedEvents", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetBinnedObservedEvents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetExpectedWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetExpectedWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetBinnedExpectedEvents", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetBinnedExpectedEvents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetBinnedDiffExpectedEvents", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetBinnedDiffExpectedEvents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dW_W</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyFixedWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyFixedWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyNominalWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyNominalWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyTrueWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyTrueWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyPhysicsWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyPhysicsWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyNuisanceWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyNuisanceWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyOscillations", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyOscillations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.ApplyWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.ApplyWeights", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tag</span>, </span><span class=\"param\"><span class=\"n\">vector</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.GetDiffLogWeights", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.GetDiffLogWeights", "kind": "function", "doc": "<p>Computes the derivative with respect the nuisance parameter nuis</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.set_likelihood", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.set_likelihood", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.FitModel", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.FitModel", "kind": "function", "doc": "<p>Binned log-Likelihood fit assuming data is Poisson-distributed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;BinnedLogLikelihoodRatio&#39;</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;L-BFGS-B&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.model_tester", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.model_tester", "kind": "function", "doc": "<p>Compute expected and its derivatives</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nuisance_vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.SetOutFile", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.SetOutFile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.CreateOutFile", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.CreateOutFile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.PyNuFit.PyNuFit.WriteToOutFile", "modulename": "pynu.PyNuFit", "qualname": "PyNuFit.WriteToOutFile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report", "modulename": "pynu.Report", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.Report.Report", "modulename": "pynu.Report", "qualname": "Report", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pynu.Report.Report.__init__", "modulename": "pynu.Report", "qualname": "Report.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">analysis_output_file</span>,</span><span class=\"param\">\t<span class=\"n\">analysis_input_file</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">doctype</span><span class=\"o\">=</span><span class=\"s1\">&#39;article&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">author</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "pynu.Report.Report.write_report", "modulename": "pynu.Report", "qualname": "Report.write_report", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.make_title", "modulename": "pynu.Report", "qualname": "Report.make_title", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.make_introduction", "modulename": "pynu.Report", "qualname": "Report.make_introduction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.make_results", "modulename": "pynu.Report", "qualname": "Report.make_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.make_nuisance", "modulename": "pynu.Report", "qualname": "Report.make_nuisance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.analysis_interpreter", "modulename": "pynu.Report", "qualname": "Report.analysis_interpreter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.which_oscillation", "modulename": "pynu.Report", "qualname": "Report.which_oscillation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.Report.Report.list_items", "modulename": "pynu.Report", "qualname": "Report.list_items", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.adam_minimizer", "modulename": "pynu.adam_minimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.adam_minimizer.adam_minimizer", "modulename": "pynu.adam_minimizer", "qualname": "adam_minimizer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">f</span>,</span><span class=\"param\">\t<span class=\"n\">initial_point</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">beta1</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">beta2</span><span class=\"o\">=</span><span class=\"mf\">0.999</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"o\">=</span><span class=\"mf\">1e-08</span>,</span><span class=\"param\">\t<span class=\"n\">precission</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">num_iterations</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader", "modulename": "pynu.analysis_reader", "kind": "module", "doc": "<p>Class for reading analysis input xml files.</p>\n"}, {"fullname": "pynu.analysis_reader.ParseXML", "modulename": "pynu.analysis_reader.ParseXML", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML", "kind": "class", "doc": "<p>Class handling the xml input analysis file, reading all the items for the analysis and\nstoring them to be used elsewhere.</p>\n"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.__init__", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.__init__", "kind": "function", "doc": "<p>Initiates class with input analysis file, declares the necessary lists and dicts.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xmlfile (str):</strong>  Name of the xml analysis input file.</li>\n<li><strong>check (bool):</strong>  Optional. Checks consistency of the analysis.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xmlfile</span><span class=\"o\">=</span><span class=\"s1\">&#39;AnalysisFiles/test.xml&#39;</span>, </span><span class=\"param\"><span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.get_analysis", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.get_analysis", "kind": "function", "doc": "<p>Sets all analysis variables, that is all the sources, targets, detectors and oscillation\nparameters of the given analysis. It also computes the number of nuisance and physics parameters,\nin case it is useful at some point.\nFurther, if the option 'check' is <code>True</code>, it performs consistency checks to the analysis file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.with_nuisance", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.with_nuisance", "kind": "function", "doc": "<p>Checks if the analysis contains nuisance parameters or it's stats. only.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.read_sources", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.read_sources", "kind": "function", "doc": "<p>Reads the neutrino source to be included in the analysis</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.read_detectors", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.read_detectors", "kind": "function", "doc": "<p>Reads the neutrino targets from each detector to be included in the analysis</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.read_experiments", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.read_experiments", "kind": "function", "doc": "<p>Reads the neutrino experiments to be included in the analysis associating detectors\nwith neutrino sources.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.read_oscillations", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.read_oscillations", "kind": "function", "doc": "<p>Reads the neutrino oscillation scenario and parameters of the analysis.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.check_sources", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.check_sources", "kind": "function", "doc": "<p>Checks that the neutrino sources declared are the same of the experiments.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None. Raises error if finds a mismatch.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.physics_grid", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.physics_grid", "kind": "function", "doc": "<p>Builds the arrays with all the physics points to be sampled from in the analysis.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict with the structure {parameter (str): numpy.array}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.cartesian_physics_grid", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.cartesian_physics_grid", "kind": "function", "doc": "<p>Builds the grid of physics points to be sampled from in the analysis. It is computed as the cartesian\nproduct of the 'self.PhysGrid' arrays and ordered in the same way.\nthe</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of lists with all the pysics points.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.check_nuisance", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.check_nuisance", "kind": "function", "doc": "<p>Prints each nuisance parameter to be checked by user.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.check_physics", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.check_physics", "kind": "function", "doc": "<p>Prints each physics parameter to be checked by user.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None. Exits if there are no physics parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.check_fixed", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.check_fixed", "kind": "function", "doc": "<p>Prints each fixec parameter to be checked by user.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.get_nominal_values", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.get_nominal_values", "kind": "function", "doc": "<p>Returns the values (if fixed), nominal values (if nuisance) or true values (if physics)\nof the input parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keyw (str):</strong>  Name of the parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float: Value of the parameter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keyw</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.get_tune", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.get_tune", "kind": "function", "doc": "<p>Returns the source or Physics Tunes block of a given parameter/tune.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tune (str):</strong>  Name  of the parameter or tune.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Str of the block of the given tune.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tune</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.analysis_reader.ParseXML.ParseXML.reader", "modulename": "pynu.analysis_reader.ParseXML", "qualname": "ParseXML.reader", "kind": "function", "doc": "<p>Main general method for reading a given item or block from the analysis xml file. It adds the\nread information into the class variables classifying each of the tunes as fixed, nuisance or\nphysics as stated in the xml file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (str):</strong>  It provides the block to be read. 'NeutrinoSource', 'NeutrinoTarget', etc.</li>\n<li><strong>atrib (str, optional):</strong>  By default this variable is set to 'name' as it is the most common use</li>\n<li>to read a whole block. However, further functionality is provided to read a given tune or</li>\n<li>parameter in a block.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None if atrib == 'name' and a list of items in the rest of the cases.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">atrib</span><span class=\"o\">=</span><span class=\"s1\">&#39;name&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter", "modulename": "pynu.fitter", "kind": "module", "doc": "<p>Contains all fitter classes.</p>\n"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio", "kind": "class", "doc": "<p>Class containing all the information needed to perform an analysis and the methods for computing\nthe log likelihood ratio ($-2\\ln\\big(\\frac{L(Exp.)}{L(Obs.)}\\big)\\sim\\chi^2$) given a set of binned\nobserved data, binned expected events at a given physics point and nuisance parameters, and assuming\nPoisson statistics.</p>\n"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.__init__", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.__init__", "kind": "function", "doc": "<p>Initiates the class by storing the non-changing items of the $\\chi^2$ calculation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>observation (dict):</strong>  Produced by PyNuFit and follows the structue (Experiment(str): binned events (numpy.array).</li>\n<li><strong>nominal_nuisance (list of float):</strong>  Produced from the xml analysis file, it contains the nominal values assumed</li>\n<li>for the nuisance parameters.</li>\n<li><strong>sigma_nuisance (list of float):</strong>  Produced from the xml analysis file, it contains the standard deviation values</li>\n<li>assumed for the nuisance parameters.</li>\n<li><strong>dist_nuisance (list of str):</strong>  Produced from the xml analysis file, it contains the type of distribution which is</li>\n<li>assumed for each nuisance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">observation</span>, </span><span class=\"param\"><span class=\"n\">nominal_nuisance</span>, </span><span class=\"param\"><span class=\"n\">sigma_nuisance</span>, </span><span class=\"param\"><span class=\"n\">dist_nuisance</span></span>)</span>"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.stats_only", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.stats_only", "kind": "function", "doc": "<p>Returns the value of binned $\\chi^2 = 2\\sum_i \\Big(\nE_i-O_i+O_i\\ln\\big(\\frac{O_i}{E_i}\\big)\\Big)$, given the dictionary of binned expected number of events\nfor each experiment of the analysis.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (Experiment(str): binned events</li>\n<li><strong>(numpy.array):</strong>  similarly to observation, but for a given physics and nuisance values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float with the value of $\\chi^2$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expectation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.stats_and_systematics", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.stats_and_systematics", "kind": "function", "doc": "<p>Returns the value of binned $\\chi^2 = 2\\sum_i \\Big(\nE_i-O_i+O_i\\ln\\big(\\frac{O_i}{E_i}\\big)\\Big) + 2\\sum_j \\ln\\Big(\\frac{P^{nuis}_j(x)}{P^{nuis}_j(x=\\mu)}\\Big)$,\ngiven the dictionary of binned expected number of events for each experiment of the analysis and taking\ninto account the nuisance penalty terms.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expectation (dict):</strong>  Produced by PyNuFit and follows the structue (Experiment(str): binned events</li>\n<li>(numpy.array) similarly to observation, but for a given physics and nuisance values.</li>\n<li><strong>nuisance (list of float):</strong>  Values for the nuisance parameters ordered as provided by ParseXML class.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float with the value of $\\chi^2$ with nuisance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expectation</span>, </span><span class=\"param\"><span class=\"n\">nuisance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.gradient", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.gradient", "kind": "function", "doc": "<p>Returns the gradient of binned $\\chi^2$ computed analytically, given the dictionary of binned\nexpected number of events for each experiment of the analysis and its derivative with respect to every\nnuisance parameter.</p>\n\n<p>$\\nabla_j \\chi^2 = 2~\\sum_{i} \\Big( 1 - \\frac{O_i}{E_i}\\Big)\\frac{\\partial E_i}{\\partial x_j} + \\frac{2}{P^{nuis}_j(x)} \\frac{d~P^{nuis}_j(x)}{dx_j}$</p>\n\n<p>LIMITATION: Currently, this is only done for nuisance following normal distributions. Other distributions\nlike Beta will come soon.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (Experiment(str): binned events</li>\n<li>(numpy.array) similarly to observation, but for a given physics and nuisance values.</li>\n<li><strong>diff_expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (nuisance parameter (str):</li>\n<li><strong>(Experiment(str):</strong>  binned events (numpy.array)).</li>\n<li><strong>nuisance (list of float):</strong>  Values for the nuisance parameters ordered as provided by ParseXML class.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with each component of $\\nabla \\chi^2$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expectation</span>, </span><span class=\"param\"><span class=\"n\">diff_expectation</span>, </span><span class=\"param\"><span class=\"n\">nuisance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.nuisance_penalty", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.nuisance_penalty", "kind": "function", "doc": "<p>Returns the penalty term associated to nuisance parameters for the $\\chi^2$ computation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nuisance (list of float):</strong>  Values for the nuisance parameters ordered as provided by</li>\n<li><code>pynu.analysis_reader.ParseXML</code> class.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float with $\\sum_j \\ln\\big(\\frac{P^{nuis}_j(x)}{P^{nuis}_j(x=\\mu)}\\big)$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nuisance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.analytic_priors_bounds", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.analytic_priors_bounds", "kind": "function", "doc": "<p>Returns the first-order values of the nuisance parameters which minimize the $\\chi^2$ at a given\nphysics points. Here, first-order means we assume that the binned expected number of events is not\nmodified by nuisance parameters, i.e. nuisance parameters are assumed to take the default value in this\napproximation.</p>\n\n<p>$\\nabla_j \\chi^2  =0$, and at first order, $E'_i \\approx E_i + \\frac{\\partial E_i}{\\partial x_j} (x_j-\\mu_j)$,\nwhere $E_i$ is the number of expected events with nuisance at their nomnial values.</p>\n\n<p>$\\widetilde{x_j} = \\mu_j + \\frac{\\sum \\Big(\\frac{O_i}{E_i} - 1 \\Big) \\left.\\frac{\\partial~E_i}{\\partial x_j}\\right\\vert_{x_j=\\mu_j} } {\\sum \\frac{O_i}{{E_i}^2} \\Big( \\left.\\frac{\\partial~E_i}{\\partial x_j}\\right\\vert_{x_j=\\mu_j}\\Big)^2 + \\frac{1}{\\sigma^2_j}}$</p>\n\n<p>Further, bounds for the final values of the nuisance parameters as follows.</p>\n\n<p>$x_j\\in[\\widetilde{x_j}-\\delta_j,\\widetilde{x_j}+\\delta_j]$, where $\\delta_j = \\min(2\\cdot|\\widetilde{x_j} - \\mu_j|, \\sigma)$</p>\n\n<p>All this information is very useful for the minimizer to find faster the values of nuisance parameters\nminimizing the $\\chi^2$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (Experiment(str): binned events</li>\n<li>(numpy.array) similarly to observation, but for a given physics and nuisance values.</li>\n<li><strong>diff_expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (nuisance parameter (str):</li>\n<li><strong>(Experiment(str):</strong>  binned events (numpy.array)).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the estimate for the nuisance parameters.\n  Tuple with the lower and upper bounds for the nuisance parameters. Tuple(Tuple(lower,upper)).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expectation</span>, </span><span class=\"param\"><span class=\"n\">diff_expectation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.BinnedLogLikelihoodRatio.BinnedLogLikelihoodRatio.parabolic_priors", "modulename": "pynu.fitter.BinnedLogLikelihoodRatio", "qualname": "BinnedLogLikelihoodRatio.parabolic_priors", "kind": "function", "doc": "<p>Second order analytic computation of values for parameters to be mariginalized\nassuming we are close enough to the minimum , i.e. a parabola, i.e. linear derivative.</p>\n\n<p>$\\widetilde{x_j} = \\frac{\\nabla_j \\chi^2(x'_j) * \\mu_j - \\nabla_j \\chi^2(\\mu_j) * x'_j}{\\nabla_j \\chi^2(x'_j) - \\nabla_j \\chi^2(\\mu_j)}$</p>\n\n<p>NOTE: This method does not work well and needs more thought so use it carefully.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (Experiment(str): binned events</li>\n<li>(numpy.array) similarly to observation, but for a given physics and nuisance values.</li>\n<li><strong>diff_expectation (dict):</strong>  Produced by <code>pynu.PyNuFit</code> and follows the structue (nuisance parameter (str):</li>\n<li><strong>(Experiment(str):</strong>  binned events (numpy.array)).</li>\n<li><strong>priors (list of float):</strong>  Values of nuisance parameter estimates other than the nominal values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the estimate for the nuisance parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expectation_prior</span>, </span><span class=\"param\"><span class=\"n\">diff_expectation_prior</span>, </span><span class=\"param\"><span class=\"n\">prior</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio", "kind": "class", "doc": "<p>Class containing all the information needed to perform an analysis and the methods for computing\nthe log likelihood ratio ($-2\\ln\\big(\\frac{L(Exp.)}{L(Obs.)}\\big)\\sim\\chi^2$) given a set of binned\nobserved data, binned expected events at a given physics point and nuisance parameters, and assuming\nPoisson statistics.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obervation (dict):</strong>  Produced by PyNuFit and follows the structue (Experiment(str): binned events (numpy.array).</li>\n<li><strong>nominal_nuisance (list of float):</strong>  Produced from the xml analysis file, it contains the nominal values assumed for the nuisance parameters.</li>\n<li><strong>sigma_nuisance (list of float):</strong>  Produced from the xml analysis file, it contains the standard deviation values assumed for the nuisance parameters.</li>\n<li><strong>dist_nuisance (list of str):</strong>  Produced from the xml analysis file, it contains the type of distribution which is assumed for each nuisance.</li>\n</ul>\n"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.__init__", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">observed_KDE_dict</span>,</span><span class=\"param\">\t<span class=\"n\">NominalNuisance_list</span>,</span><span class=\"param\">\t<span class=\"n\">SigmaNuisance_list</span>,</span><span class=\"param\">\t<span class=\"n\">DistNuisance_list</span></span>)</span>"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.stats_only", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.stats_only", "kind": "function", "doc": "<p>Compute statistics only binned chi-squared</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Expectation_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.stats_and_systematics", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.stats_and_systematics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Expectation_dict</span>, </span><span class=\"param\"><span class=\"n\">nuisance_vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.gradient", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.gradient", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Expectation_dict</span>, </span><span class=\"param\"><span class=\"n\">DiffExpectation_dict</span>, </span><span class=\"param\"><span class=\"n\">nuisance_vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.nuisance_pleantly", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.nuisance_pleantly", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nuisance_vector</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.analytic_priors_bounds", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.analytic_priors_bounds", "kind": "function", "doc": "<p>First order analytic computation of values for parameters to be mariginalized</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Expectation_dict</span>, </span><span class=\"param\"><span class=\"n\">DiffExpectation_dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.UnbinnedLogLikelihoodRatio.UnbinnedLogLikelihoodRatio.parabolic_priors", "modulename": "pynu.fitter.UnbinnedLogLikelihoodRatio", "qualname": "UnbinnedLogLikelihoodRatio.parabolic_priors", "kind": "function", "doc": "<p>Second order analytic computation of values for parameters to be mariginalized\nassuming we are close enough to the minimum , i.e. a parabola, i.e. linear derivative</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Expectation_dict_prior</span>, </span><span class=\"param\"><span class=\"n\">DiffExpectation_dict_prior</span>, </span><span class=\"param\"><span class=\"n\">prior</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions", "modulename": "pynu.fitter.distributions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.fitter.distributions.gaussian", "modulename": "pynu.fitter.distributions", "qualname": "gaussian", "kind": "function", "doc": "<p>Returns the values of Gaussian or Normal probability distribution,\n$\\mathcal{N}(x;\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\ne^{\\frac{(x-\\mu)^2}{2\\sigma^2}}$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain the probability.</li>\n<li><strong>m (float):</strong>  Mean of the distribution.</li>\n<li><strong>s (float):</strong>  Standard deviation of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with values of $\\mathcal{N}(x;\\mu,\\sigma)$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.log_gaussian_ratio", "modulename": "pynu.fitter.distributions", "qualname": "log_gaussian_ratio", "kind": "function", "doc": "<p>Returns the values of -2 times the logarithm of the likelihood ratio\nassuming <code>gaussian</code> probability distribution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain logLLH ratio.</li>\n<li><strong>m (float):</strong>  Mean of the distribution.</li>\n<li><strong>s (float):</strong>  Standard deviation of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the values for $-2\\cdot\\ln{\\Big(\\frac{\\mathcal{N}(x;\\mu,\\sigma)}\n  {\\mathcal{N}(\\mu;\\mu,\\sigma)}\\Big)}$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.diff_log_gaussian_ratio", "modulename": "pynu.fitter.distributions", "qualname": "diff_log_gaussian_ratio", "kind": "function", "doc": "<p>Returns the values of the derivative with respect to 'x\u00b4 of -2 times\nthe logarithm of the likelihood ratio assuming <code>gaussian</code> probability distribution,\n$ -2 \\ln{\\Big(\\frac{\\mathcal{N}(x;\\mu,\\sigma)}{\\mathcal{N}(\\mu;\\mu,\\sigma)}\\Big)}$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain the derivative of</li>\n<li>the logLLH ratio.</li>\n<li><strong>m (float):</strong>  Mean of the distribution.</li>\n<li><strong>s (float):</strong>  Standard deviation of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the values for $-2\\frac{\\mathrm{d}}{\\mathrm{d}x}\n  \\Big(\\ln{\\Big(\\frac{\\mathcal{N}(x;\\mu,\\sigma)}{\\mathcal{N}\n  (\\mu;\\mu,\\sigma)}\\Big)}\\Big)$</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.beta", "modulename": "pynu.fitter.distributions", "qualname": "beta", "kind": "function", "doc": "<p>Returns the values of Beta probability distribution,\n$B(x;\\alpha,\\beta) = \\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\nx^{\\alpha-1} (1-x)^{\\beta-1}$.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain the probability.</li>\n<li><strong>a (float):</strong>  $\\alpha$ parameter.</li>\n<li><strong>b (float):</strong>  $\\beta$ parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with values of $B(x;\\alpha,\\beta)$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.beta_param", "modulename": "pynu.fitter.distributions", "qualname": "beta_param", "kind": "function", "doc": "<p>Returns the \u03b1 and \u03b2 parameters of the <code>beta</code> probability distribution from\nthe mode and standrd deviation</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (float):</strong>  Mode of the distribution.</li>\n<li><strong>s (float):</strong>  Standard deviation of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Two floats, the \u03b1 and \u03b2 values .</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.beta_mean", "modulename": "pynu.fitter.distributions", "qualname": "beta_mean", "kind": "function", "doc": "<p>Returns the mean of the <code>beta</code> probability distribution, provided the\n\u03b1 and \u03b2 parameters.</p>\n\n<p>$mean = \\frac{\\alpha}{\\alpha+\\beta}$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  $\\alpha$ parameter of the distribution.</li>\n<li><strong>b (float):</strong>  $\\beta$ parameter of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float, the mean of the distribution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.beta_mode", "modulename": "pynu.fitter.distributions", "qualname": "beta_mode", "kind": "function", "doc": "<p>Returns the mode of the <code>beta</code> probability distribution, provided the\n\u03b1 and \u03b2 parameters.</p>\n\n<p>$\\mu = \\frac{\\alpha-1}{\\alpha+\\beta-2}$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  $\\alpha$ parameter of the distribution.</li>\n<li><strong>b (float):</strong>  $\\beta$ parameter of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float, the mode of the distribution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.beta_std", "modulename": "pynu.fitter.distributions", "qualname": "beta_std", "kind": "function", "doc": "<p>Returns the standard deviation of the <code>beta</code> probability distribution,\nprovided the \u03b1 and \u03b2 parameters.</p>\n\n<p>$\\sigma = \\frac{\\alpha\\beta}{(\\alpha+\\beta)^2(\\alpha+\\beta+1)}$</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a (float):</strong>  $\\alpha$ parameter of the distribution.</li>\n<li><strong>b (float):</strong>  $\\beta$ parameter of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Float, the Standard deviation of the distribution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.log_beta_ratio", "modulename": "pynu.fitter.distributions", "qualname": "log_beta_ratio", "kind": "function", "doc": "<p>Returns the values of -2 times the logarithm of the likelihood ratio\nassuming <code>beta</code> probability distribution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain logLLH ratio.</li>\n<li><strong>a (float):</strong>  $\\alpha$ parameter of the distribution.</li>\n<li><strong>b (float):</strong>  $\\beta$ parameter of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the values for $-2\\cdot\\ln{\\Big(\\frac{B(x;\\alpha,\\beta)}{B(\\mu;\\alpha,\\beta)}\\Big)}$.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.diff_log_beta_ratio", "modulename": "pynu.fitter.distributions", "qualname": "diff_log_beta_ratio", "kind": "function", "doc": "<p>Returns the values of of the derivative with respect to 'x\u00b4 of -2 times\nthe logarithm of the likelihood ratio assuming <code>beta</code> probability distribution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain the derivative of</li>\n<li>the logLLH ratio.</li>\n<li><strong>m (float):</strong>  Mode of the distribution.</li>\n<li><strong>s (float):</strong>  Standard deviation of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the values for $-2\\frac{\\mathrm{d}}{\\mathrm{d}x} \\Big(\\ln{\\Big(\\frac{B(x;\\alpha,\\beta)}{B(\\mu;\\alpha,\\beta)}\\Big)}\\Big)$</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">m</span>, </span><span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.fitter.distributions.diff_log_beta_ratio_args", "modulename": "pynu.fitter.distributions", "qualname": "diff_log_beta_ratio_args", "kind": "function", "doc": "<p>Returns the values of of the derivative with respect to 'x\u00b4 of -2\ntimes the logarithm of the likelihood ratio assuming <code>beta</code> probability\ndistribution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (numpy array):</strong>  Values for which you want to obtain the derivative of</li>\n<li>the logLLH ratio.</li>\n<li><strong>a (float):</strong>  $\\alpha$ parameter of the distribution.</li>\n<li><strong>b (float):</strong>  $\\beta$ parameter of the distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Numpy array with the values for $-2\\frac{\\mathrm{d}}{\\mathrm{d}x} \\Big(\\ln{\\Big(\\frac{B(x;\\alpha,\\beta)}{B(\\mu;\\alpha,\\beta)}\\Big)}\\Big)$</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pynu.gradient_descent_minimizer", "modulename": "pynu.gradient_descent_minimizer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pynu.gradient_descent_minimizer.gradient_descent_minimizer", "modulename": "pynu.gradient_descent_minimizer", "qualname": "gradient_descent_minimizer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">f</span>,</span><span class=\"param\">\t<span class=\"n\">initial_point</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span>,</span><span class=\"param\">\t<span class=\"n\">precission</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">num_iterations</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();